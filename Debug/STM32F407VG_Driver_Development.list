
STM32F407VG_Driver_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c6c  08000c6c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c6c  08000c6c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000c6c  08000c6c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c6c  08000c6c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c6c  08000c6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c70  08000c70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  08000c8c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000c8c  00020034  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c84  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000513  00000000  00000000  00021cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000221e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00022318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022c1  00000000  00000000  00022418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001939  00000000  00000000  000246d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000094c9  00000000  00000000  00026012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002f4db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000430  00000000  00000000  0002f530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c54 	.word	0x08000c54

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000c54 	.word	0x08000c54

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <GPIO_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 *********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]

	//RCC Clock Enable for respective GPIO Port
	if(pGPIOHandle->pGPIOx == GPIOA)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a6e      	ldr	r2, [pc, #440]	; (80003c0 <GPIO_Init+0x1c8>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d106      	bne.n	8000218 <GPIO_Init+0x20>
		GPIOA_PClk_EN();
 800020a:	4b6e      	ldr	r3, [pc, #440]	; (80003c4 <GPIO_Init+0x1cc>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	4a6d      	ldr	r2, [pc, #436]	; (80003c4 <GPIO_Init+0x1cc>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
 8000216:	e02e      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOB)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a6a      	ldr	r2, [pc, #424]	; (80003c8 <GPIO_Init+0x1d0>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_Init+0x38>
			GPIOB_PClk_EN();
 8000222:	4b68      	ldr	r3, [pc, #416]	; (80003c4 <GPIO_Init+0x1cc>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000226:	4a67      	ldr	r2, [pc, #412]	; (80003c4 <GPIO_Init+0x1cc>)
 8000228:	f043 0302 	orr.w	r3, r3, #2
 800022c:	6313      	str	r3, [r2, #48]	; 0x30
 800022e:	e022      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOC)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a65      	ldr	r2, [pc, #404]	; (80003cc <GPIO_Init+0x1d4>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_Init+0x50>
			GPIOC_PClk_EN();
 800023a:	4b62      	ldr	r3, [pc, #392]	; (80003c4 <GPIO_Init+0x1cc>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a61      	ldr	r2, [pc, #388]	; (80003c4 <GPIO_Init+0x1cc>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
 8000246:	e016      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOD)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a60      	ldr	r2, [pc, #384]	; (80003d0 <GPIO_Init+0x1d8>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d106      	bne.n	8000260 <GPIO_Init+0x68>
			GPIOD_PClk_EN();
 8000252:	4b5c      	ldr	r3, [pc, #368]	; (80003c4 <GPIO_Init+0x1cc>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4a5b      	ldr	r2, [pc, #364]	; (80003c4 <GPIO_Init+0x1cc>)
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	6313      	str	r3, [r2, #48]	; 0x30
 800025e:	e00a      	b.n	8000276 <GPIO_Init+0x7e>
	else if(pGPIOHandle->pGPIOx == GPIOE)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a5b      	ldr	r2, [pc, #364]	; (80003d4 <GPIO_Init+0x1dc>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d105      	bne.n	8000276 <GPIO_Init+0x7e>
			GPIOE_PClk_EN();
 800026a:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <GPIO_Init+0x1cc>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	4a55      	ldr	r2, [pc, #340]	; (80003c4 <GPIO_Init+0x1cc>)
 8000270:	f043 0310 	orr.w	r3, r3, #16
 8000274:	6313      	str	r3, [r2, #48]	; 0x30

	uint32_t temp = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]


	// Configure Pin GPIO_PinNumber
	uint8_t Pin = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	791b      	ldrb	r3, [r3, #4]
 800027e:	72fb      	strb	r3, [r7, #11]

	// Configure Pin Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 0x03){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	795b      	ldrb	r3, [r3, #5]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d81e      	bhi.n	80002c6 <GPIO_Init+0xce>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2*Pin));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	795b      	ldrb	r3, [r3, #5]
 800028c:	461a      	mov	r2, r3
 800028e:	7afb      	ldrb	r3, [r7, #11]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2*Pin));
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	7afb      	ldrb	r3, [r7, #11]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	400a      	ands	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	6819      	ldr	r1, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	e0ae      	b.n	8000424 <GPIO_Init+0x22c>
	}
	else{
		// Interrupt Mode Settings
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	795b      	ldrb	r3, [r3, #5]
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	d116      	bne.n	80002fc <GPIO_Init+0x104>
			//Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002ce:	4b42      	ldr	r3, [pc, #264]	; (80003d8 <GPIO_Init+0x1e0>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	7912      	ldrb	r2, [r2, #4]
 80002d6:	4611      	mov	r1, r2
 80002d8:	2201      	movs	r2, #1
 80002da:	408a      	lsls	r2, r1
 80002dc:	4611      	mov	r1, r2
 80002de:	4a3e      	ldr	r2, [pc, #248]	; (80003d8 <GPIO_Init+0x1e0>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	60d3      	str	r3, [r2, #12]
			//Disable the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002e4:	4b3c      	ldr	r3, [pc, #240]	; (80003d8 <GPIO_Init+0x1e0>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	7912      	ldrb	r2, [r2, #4]
 80002ec:	4611      	mov	r1, r2
 80002ee:	2201      	movs	r2, #1
 80002f0:	408a      	lsls	r2, r1
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a38      	ldr	r2, [pc, #224]	; (80003d8 <GPIO_Init+0x1e0>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	6093      	str	r3, [r2, #8]
		}
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	2b05      	cmp	r3, #5
 8000302:	d116      	bne.n	8000332 <GPIO_Init+0x13a>
			//Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <GPIO_Init+0x1e0>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4611      	mov	r1, r2
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	4611      	mov	r1, r2
 8000314:	4a30      	ldr	r2, [pc, #192]	; (80003d8 <GPIO_Init+0x1e0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	6093      	str	r3, [r2, #8]
			//Disable the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <GPIO_Init+0x1e0>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	7912      	ldrb	r2, [r2, #4]
 8000322:	4611      	mov	r1, r2
 8000324:	2201      	movs	r2, #1
 8000326:	408a      	lsls	r2, r1
 8000328:	43d2      	mvns	r2, r2
 800032a:	4611      	mov	r1, r2
 800032c:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <GPIO_Init+0x1e0>)
 800032e:	400b      	ands	r3, r1
 8000330:	60d3      	str	r3, [r2, #12]
		}
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FTRT){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	795b      	ldrb	r3, [r3, #5]
 8000336:	2b06      	cmp	r3, #6
 8000338:	d115      	bne.n	8000366 <GPIO_Init+0x16e>
			//Configure the FTSR & RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <GPIO_Init+0x1e0>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	7912      	ldrb	r2, [r2, #4]
 8000342:	4611      	mov	r1, r2
 8000344:	2201      	movs	r2, #1
 8000346:	408a      	lsls	r2, r1
 8000348:	4611      	mov	r1, r2
 800034a:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <GPIO_Init+0x1e0>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6093      	str	r3, [r2, #8]

			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <GPIO_Init+0x1e0>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	7912      	ldrb	r2, [r2, #4]
 8000358:	4611      	mov	r1, r2
 800035a:	2201      	movs	r2, #1
 800035c:	408a      	lsls	r2, r1
 800035e:	4611      	mov	r1, r2
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <GPIO_Init+0x1e0>)
 8000362:	430b      	orrs	r3, r1
 8000364:	60d3      	str	r3, [r2, #12]
		}


		//2. Configure the GPIO Port Selection in SYSCFG_EXTIR
		uint8_t extiLine = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	089b      	lsrs	r3, r3, #2
 800036c:	72bb      	strb	r3, [r7, #10]
		uint8_t extiPos  = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	791b      	ldrb	r3, [r3, #4]
 8000372:	f003 0303 	and.w	r3, r3, #3
 8000376:	727b      	strb	r3, [r7, #9]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <GPIO_Init+0x1c8>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d02c      	beq.n	80003dc <GPIO_Init+0x1e4>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <GPIO_Init+0x1d0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d016      	beq.n	80003ba <GPIO_Init+0x1c2>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <GPIO_Init+0x1d4>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d00f      	beq.n	80003b6 <GPIO_Init+0x1be>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <GPIO_Init+0x1d8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d008      	beq.n	80003b2 <GPIO_Init+0x1ba>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <GPIO_Init+0x1dc>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d101      	bne.n	80003ae <GPIO_Init+0x1b6>
 80003aa:	2304      	movs	r3, #4
 80003ac:	e017      	b.n	80003de <GPIO_Init+0x1e6>
 80003ae:	2300      	movs	r3, #0
 80003b0:	e015      	b.n	80003de <GPIO_Init+0x1e6>
 80003b2:	2303      	movs	r3, #3
 80003b4:	e013      	b.n	80003de <GPIO_Init+0x1e6>
 80003b6:	2302      	movs	r3, #2
 80003b8:	e011      	b.n	80003de <GPIO_Init+0x1e6>
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <GPIO_Init+0x1e6>
 80003be:	bf00      	nop
 80003c0:	40020000 	.word	0x40020000
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40020800 	.word	0x40020800
 80003d0:	40020c00 	.word	0x40020c00
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40013c00 	.word	0x40013c00
 80003dc:	2300      	movs	r3, #0
 80003de:	723b      	strb	r3, [r7, #8]

		SYSCGF_PClk_EN();
 80003e0:	4b61      	ldr	r3, [pc, #388]	; (8000568 <GPIO_Init+0x370>)
 80003e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e4:	4a60      	ldr	r2, [pc, #384]	; (8000568 <GPIO_Init+0x370>)
 80003e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ea:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG->EXTICR[extiLine] |= (portCode << extiPos*4);
 80003ec:	4a5f      	ldr	r2, [pc, #380]	; (800056c <GPIO_Init+0x374>)
 80003ee:	7abb      	ldrb	r3, [r7, #10]
 80003f0:	3302      	adds	r3, #2
 80003f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f6:	7a39      	ldrb	r1, [r7, #8]
 80003f8:	7a7b      	ldrb	r3, [r7, #9]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	4618      	mov	r0, r3
 8000402:	495a      	ldr	r1, [pc, #360]	; (800056c <GPIO_Init+0x374>)
 8000404:	7abb      	ldrb	r3, [r7, #10]
 8000406:	4302      	orrs	r2, r0
 8000408:	3302      	adds	r3, #2
 800040a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the interrupt delivery from peripheral side using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040e:	4b58      	ldr	r3, [pc, #352]	; (8000570 <GPIO_Init+0x378>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7912      	ldrb	r2, [r2, #4]
 8000416:	4611      	mov	r1, r2
 8000418:	2201      	movs	r2, #1
 800041a:	408a      	lsls	r2, r1
 800041c:	4611      	mov	r1, r2
 800041e:	4a54      	ldr	r2, [pc, #336]	; (8000570 <GPIO_Init+0x378>)
 8000420:	430b      	orrs	r3, r1
 8000422:	6013      	str	r3, [r2, #0]
	}


	// Configure Pin OPType
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << Pin);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7a1b      	ldrb	r3, [r3, #8]
 8000428:	461a      	mov	r2, r3
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x03 << Pin);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	685a      	ldr	r2, [r3, #4]
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2103      	movs	r1, #3
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	4619      	mov	r1, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	400a      	ands	r2, r1
 800044a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6859      	ldr	r1, [r3, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	430a      	orrs	r2, r1
 800045a:	605a      	str	r2, [r3, #4]


	// Configure Pin PinSpeed
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2*Pin));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	799b      	ldrb	r3, [r3, #6]
 8000460:	461a      	mov	r2, r3
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2*Pin));
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	7afb      	ldrb	r3, [r7, #11]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2103      	movs	r1, #3
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6899      	ldr	r1, [r3, #8]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	430a      	orrs	r2, r1
 8000496:	609a      	str	r2, [r3, #8]


	// Configure Pin PinPuPdCtrl
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl) << (2*Pin));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	79db      	ldrb	r3, [r3, #7]
 800049c:	461a      	mov	r2, r3
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2*Pin));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	400a      	ands	r2, r1
 80004c2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	68d9      	ldr	r1, [r3, #12]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	60da      	str	r2, [r3, #12]



	// Configure Pin AltFunc
	if(Pin < 8){
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	2b07      	cmp	r3, #7
 80004d8:	d81e      	bhi.n	8000518 <GPIO_Init+0x320>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunc) << (4*Pin));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	7a5b      	ldrb	r3, [r3, #9]
 80004de:	461a      	mov	r2, r3
 80004e0:	7afb      	ldrb	r3, [r7, #11]
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFRL &= ~(0x0F << (4*Pin));
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6a1a      	ldr	r2, [r3, #32]
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	210f      	movs	r1, #15
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	621a      	str	r2, [r3, #32]
		pGPIOHandle->pGPIOx->AFRL |= temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a19      	ldr	r1, [r3, #32]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	430a      	orrs	r2, r1
 8000514:	621a      	str	r2, [r3, #32]
		pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << (4*(Pin%8)));
		pGPIOHandle->pGPIOx->AFRH |= temp;
	}


}
 8000516:	e021      	b.n	800055c <GPIO_Init+0x364>
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunc) << (4*(Pin%8)));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7a5b      	ldrb	r3, [r3, #9]
 800051c:	461a      	mov	r2, r3
 800051e:	7afb      	ldrb	r3, [r7, #11]
 8000520:	f003 0307 	and.w	r3, r3, #7
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << (4*(Pin%8)));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	f003 0307 	and.w	r3, r3, #7
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	210f      	movs	r1, #15
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	400a      	ands	r2, r1
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFRH |= temp;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	430a      	orrs	r2, r1
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800
 800056c:	40013800 	.word	0x40013800
 8000570:	40013c00 	.word	0x40013c00

08000574 <GPIO_IRQConfig>:
}

/*
 * GPIO Interrupt configuration
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint32_t IRQPriority, uint8_t EnorDi){
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]

	//Set-reset the interrupt
	if(EnorDi == ENABLE){
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d133      	bne.n	80005f2 <GPIO_IRQConfig+0x7e>
		if(IRQNumber >=0  &&  IRQNumber<32)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b1f      	cmp	r3, #31
 800058e:	d80a      	bhi.n	80005a6 <GPIO_IRQConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000590:	4b44      	ldr	r3, [pc, #272]	; (80006a4 <GPIO_IRQConfig+0x130>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	79fa      	ldrb	r2, [r7, #7]
 8000596:	2101      	movs	r1, #1
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	4611      	mov	r1, r2
 800059e:	4a41      	ldr	r2, [pc, #260]	; (80006a4 <GPIO_IRQConfig+0x130>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	e05b      	b.n	800065e <GPIO_IRQConfig+0xea>
		else if(IRQNumber >=32  &&  IRQNumber<64)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b1f      	cmp	r3, #31
 80005aa:	d90f      	bls.n	80005cc <GPIO_IRQConfig+0x58>
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b3f      	cmp	r3, #63	; 0x3f
 80005b0:	d80c      	bhi.n	80005cc <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber%32);
 80005b2:	4b3d      	ldr	r3, [pc, #244]	; (80006a8 <GPIO_IRQConfig+0x134>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	f002 021f 	and.w	r2, r2, #31
 80005bc:	2101      	movs	r1, #1
 80005be:	fa01 f202 	lsl.w	r2, r1, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a38      	ldr	r2, [pc, #224]	; (80006a8 <GPIO_IRQConfig+0x134>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	e048      	b.n	800065e <GPIO_IRQConfig+0xea>
		else if(IRQNumber >=64  &&  IRQNumber<96)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b3f      	cmp	r3, #63	; 0x3f
 80005d0:	d945      	bls.n	800065e <GPIO_IRQConfig+0xea>
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b5f      	cmp	r3, #95	; 0x5f
 80005d6:	d842      	bhi.n	800065e <GPIO_IRQConfig+0xea>
			*NVIC_ISER2 |= (1 << IRQNumber%32);
 80005d8:	4b34      	ldr	r3, [pc, #208]	; (80006ac <GPIO_IRQConfig+0x138>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	f002 021f 	and.w	r2, r2, #31
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a30      	ldr	r2, [pc, #192]	; (80006ac <GPIO_IRQConfig+0x138>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	e035      	b.n	800065e <GPIO_IRQConfig+0xea>
	}
	else{
		if(IRQNumber >=0  &&  IRQNumber<32)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b1f      	cmp	r3, #31
 80005f6:	d80b      	bhi.n	8000610 <GPIO_IRQConfig+0x9c>
			*NVIC_ICER0 &= ~(1 << IRQNumber);
 80005f8:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <GPIO_IRQConfig+0x13c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	43d2      	mvns	r2, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <GPIO_IRQConfig+0x13c>)
 800060a:	400b      	ands	r3, r1
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e026      	b.n	800065e <GPIO_IRQConfig+0xea>
		else if(IRQNumber >=32  &&  IRQNumber<64)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b1f      	cmp	r3, #31
 8000614:	d910      	bls.n	8000638 <GPIO_IRQConfig+0xc4>
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b3f      	cmp	r3, #63	; 0x3f
 800061a:	d80d      	bhi.n	8000638 <GPIO_IRQConfig+0xc4>
			*NVIC_ICER1 &= ~(1 << IRQNumber%32);
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <GPIO_IRQConfig+0x140>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	f002 021f 	and.w	r2, r2, #31
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	43d2      	mvns	r2, r2
 800062e:	4611      	mov	r1, r2
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <GPIO_IRQConfig+0x140>)
 8000632:	400b      	ands	r3, r1
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	e012      	b.n	800065e <GPIO_IRQConfig+0xea>
		else if(IRQNumber >=64  &&  IRQNumber<96)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b3f      	cmp	r3, #63	; 0x3f
 800063c:	d90f      	bls.n	800065e <GPIO_IRQConfig+0xea>
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b5f      	cmp	r3, #95	; 0x5f
 8000642:	d80c      	bhi.n	800065e <GPIO_IRQConfig+0xea>
			*NVIC_ICER2 &= ~(1 << IRQNumber%32);
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <GPIO_IRQConfig+0x144>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	f002 021f 	and.w	r2, r2, #31
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	43d2      	mvns	r2, r2
 8000656:	4611      	mov	r1, r2
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <GPIO_IRQConfig+0x144>)
 800065a:	400b      	ands	r3, r1
 800065c:	6013      	str	r3, [r2, #0]
	}

	//Configure the Priority
	uint8_t irp_reg = IRQNumber/4;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	73fb      	strb	r3, [r7, #15]
	uint8_t irp_pos = IRQNumber%4;
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	73bb      	strb	r3, [r7, #14]
	uint8_t shift   = (irp_pos * 8) + (8 - NO_IPR_BITS);
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3304      	adds	r3, #4
 8000674:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE + irp_reg) |= (IRQPriority << shift);
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800067e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	7b7b      	ldrb	r3, [r7, #13]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	409a      	lsls	r2, r3
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000692:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000e104 	.word	0xe000e104
 80006ac:	e000e108 	.word	0xe000e108
 80006b0:	e000e180 	.word	0xe000e180
 80006b4:	e000e184 	.word	0xe000e184
 80006b8:	e000e188 	.word	0xe000e188

080006bc <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <GPIO_IRQHandling+0x3c>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	79fa      	ldrb	r2, [r7, #7]
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4013      	ands	r3, r2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d009      	beq.n	80006ec <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <GPIO_IRQHandling+0x3c>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	2101      	movs	r1, #1
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <GPIO_IRQHandling+0x3c>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6153      	str	r3, [r2, #20]
	}
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40013c00 	.word	0x40013c00

080006fc <Get_RCC_PLL_Clk>:
#include <stm32f407vg_i2c_driver.h>

static uint16_t HPRE[] = {2,4,8,16,32,64,128,256,512};
static uint8_t PPRE1[]= {2,4,8,16};

 uint32_t Get_RCC_PLL_Clk(void){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	 uint32_t temp = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]

	 return temp;
 8000706:	687b      	ldr	r3, [r7, #4]
 }
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <RCC_GetPClk1Value>:

uint32_t RCC_GetPClk1Value(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

	uint32_t pClk1;

	// Find the Clock Source
	uint8_t clksrc = (RCC->CFGR >> 2) & 0x3;
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <RCC_GetPClk1Value+0x98>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0303 	and.w	r3, r3, #3
 8000726:	727b      	strb	r3, [r7, #9]
	uint32_t SystemClk;
	if(clksrc == 0)
 8000728:	7a7b      	ldrb	r3, [r7, #9]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <RCC_GetPClk1Value+0x20>
		SystemClk = 16000000;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <RCC_GetPClk1Value+0x9c>)
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e00b      	b.n	800074c <RCC_GetPClk1Value+0x38>
	else if(clksrc == 1)
 8000734:	7a7b      	ldrb	r3, [r7, #9]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d102      	bne.n	8000740 <RCC_GetPClk1Value+0x2c>
		SystemClk = 8000000;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <RCC_GetPClk1Value+0xa0>)
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	e005      	b.n	800074c <RCC_GetPClk1Value+0x38>
	else if(clksrc == 2)
 8000740:	7a7b      	ldrb	r3, [r7, #9]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d102      	bne.n	800074c <RCC_GetPClk1Value+0x38>
		SystemClk = Get_RCC_PLL_Clk();
 8000746:	f7ff ffd9 	bl	80006fc <Get_RCC_PLL_Clk>
 800074a:	60f8      	str	r0, [r7, #12]

	//Find the AHB Pre-Scaler
	uint8_t temp1 = (RCC->CFGR >> 4) & 0xFF;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <RCC_GetPClk1Value+0x98>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	091b      	lsrs	r3, r3, #4
 8000752:	723b      	strb	r3, [r7, #8]
	uint8_t AHBPrescaler;
	if(temp1<8)
 8000754:	7a3b      	ldrb	r3, [r7, #8]
 8000756:	2b07      	cmp	r3, #7
 8000758:	d802      	bhi.n	8000760 <RCC_GetPClk1Value+0x4c>
		AHBPrescaler = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	72fb      	strb	r3, [r7, #11]
 800075e:	e005      	b.n	800076c <RCC_GetPClk1Value+0x58>
	else
		AHBPrescaler = HPRE[temp1-8];
 8000760:	7a3b      	ldrb	r3, [r7, #8]
 8000762:	3b08      	subs	r3, #8
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <RCC_GetPClk1Value+0xa4>)
 8000766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800076a:	72fb      	strb	r3, [r7, #11]

	//Find the APB1 Pre-Scaler
	uint8_t temp2 = (RCC->CFGR >> 10) & 0x7;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <RCC_GetPClk1Value+0x98>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	0a9b      	lsrs	r3, r3, #10
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t APB1Prescaler;
	if(temp2<4)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d802      	bhi.n	8000786 <RCC_GetPClk1Value+0x72>
		APB1Prescaler = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	72bb      	strb	r3, [r7, #10]
 8000784:	e004      	b.n	8000790 <RCC_GetPClk1Value+0x7c>
	else
		APB1Prescaler = PPRE1[temp2-8];
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	3b08      	subs	r3, #8
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <RCC_GetPClk1Value+0xa8>)
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	72bb      	strb	r3, [r7, #10]

	//Calculate Peripheral CLock
	pClk1 = (SystemClk/AHBPrescaler)/APB1Prescaler;
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	fbb2 f2f3 	udiv	r2, r2, r3
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	603b      	str	r3, [r7, #0]
	return pClk1;
 80007a0:	683b      	ldr	r3, [r7, #0]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	00f42400 	.word	0x00f42400
 80007b4:	007a1200 	.word	0x007a1200
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000014 	.word	0x20000014

080007c0 <I2C_PeriClockControl>:


/*
 * SPI Peripheral clock control function
 */
void I2C_PeriClockControl(I2C_RegDef_t* pI2Cx, uint8_t EnorDi){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d120      	bne.n	8000814 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <I2C_PeriClockControl+0xa0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <I2C_PeriClockControl+0x28>
			I2C1_PClk_EN();
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <I2C_PeriClockControl+0xa4>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <I2C_PeriClockControl+0xa4>)
 80007e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C2)
			I2C2_PClk_DI();
		else if(pI2Cx == I2C3)
			I2C3_PClk_DI();
	}
}
 80007e6:	e035      	b.n	8000854 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <I2C_PeriClockControl+0xa8>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d106      	bne.n	80007fe <I2C_PeriClockControl+0x3e>
			I2C2_PClk_EN();
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <I2C_PeriClockControl+0xa4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <I2C_PeriClockControl+0xa4>)
 80007f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fc:	e02a      	b.n	8000854 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <I2C_PeriClockControl+0xac>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d126      	bne.n	8000854 <I2C_PeriClockControl+0x94>
			I2C3_PClk_EN();
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <I2C_PeriClockControl+0xa4>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <I2C_PeriClockControl+0xa4>)
 800080c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000812:	e01f      	b.n	8000854 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <I2C_PeriClockControl+0xa0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <I2C_PeriClockControl+0x6a>
			I2C1_PClk_DI();
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <I2C_PeriClockControl+0xa4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a10      	ldr	r2, [pc, #64]	; (8000864 <I2C_PeriClockControl+0xa4>)
 8000822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000828:	e014      	b.n	8000854 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <I2C_PeriClockControl+0xa8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <I2C_PeriClockControl+0x80>
			I2C2_PClk_DI();
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <I2C_PeriClockControl+0xa4>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <I2C_PeriClockControl+0xa4>)
 8000838:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083e:	e009      	b.n	8000854 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <I2C_PeriClockControl+0xac>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d105      	bne.n	8000854 <I2C_PeriClockControl+0x94>
			I2C3_PClk_DI();
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <I2C_PeriClockControl+0xa4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <I2C_PeriClockControl+0xa4>)
 800084e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40005800 	.word	0x40005800
 800086c:	40005c00 	.word	0x40005c00

08000870 <I2C_Init>:

/*
 * I2C Init De-Init functions
 */
void I2C_Init(I2C_Handle_t* pI2CHandle){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff9e 	bl	80007c0 <I2C_PeriClockControl>

	uint32_t tempreg = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]

	//1. Enable or Disable Acking in CR1 Register
	tempreg |= (pI2CHandle->I2C_Config.AckControl << I2C_CR1_ACK);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7a5b      	ldrb	r3, [r3, #9]
 800088c:	029b      	lsls	r3, r3, #10
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4313      	orrs	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]

	tempreg = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]

	//2. Configure the Frequency of CR2 Register
	tempreg |= (RCC_GetPClk1Value()/1000000);
 80008a2:	f7ff ff37 	bl	8000714 <RCC_GetPClk1Value>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a48      	ldr	r2, [pc, #288]	; (80009cc <I2C_Init+0x15c>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	0c9b      	lsrs	r3, r3, #18
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =tempreg;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	605a      	str	r2, [r3, #4]

	tempreg = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]

	//3. Program the Device with its Own Address
	tempreg |= (pI2CHandle->I2C_Config.DeviceAddress << 1);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7a1b      	ldrb	r3, [r3, #8]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 =tempreg;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	609a      	str	r2, [r3, #8]

	//4. CCR Calculations
	tempreg = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	uint32_t ccr;

	//Standard Mode
	if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCLSpeed_SM_100){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a39      	ldr	r2, [pc, #228]	; (80009d0 <I2C_Init+0x160>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d80f      	bhi.n	800090e <I2C_Init+0x9e>
		ccr = RCC_GetPClk1Value()/(2*pI2CHandle->I2C_Config.SCLSpeed);
 80008ee:	f7ff ff11 	bl	8000714 <RCC_GetPClk1Value>
 80008f2:	4602      	mov	r2, r0
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	60bb      	str	r3, [r7, #8]
		tempreg |= (ccr & 0xFFF);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4313      	orrs	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e030      	b.n	8000970 <I2C_Init+0x100>
	}
	//Fast Mode
	else{
		tempreg |= (1 << I2C_CCR_FS);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000914:	60fb      	str	r3, [r7, #12]
		//Duty - 0
		if(pI2CHandle->I2C_Config.FMDutyCycle == I2C_FMDUTY_2){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7a9b      	ldrb	r3, [r3, #10]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d111      	bne.n	8000942 <I2C_Init+0xd2>
			ccr = RCC_GetPClk1Value()/(3*pI2CHandle->I2C_Config.SCLSpeed);
 800091e:	f7ff fef9 	bl	8000714 <RCC_GetPClk1Value>
 8000922:	4601      	mov	r1, r0
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000932:	60bb      	str	r3, [r7, #8]
			tempreg |= (ccr & 0xFFF);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	4313      	orrs	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e016      	b.n	8000970 <I2C_Init+0x100>
		}
		//Duty - 1
		else{
			ccr = RCC_GetPClk1Value()/(25*pI2CHandle->I2C_Config.SCLSpeed);
 8000942:	f7ff fee7 	bl	8000714 <RCC_GetPClk1Value>
 8000946:	4601      	mov	r1, r0
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009a      	lsls	r2, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	fbb1 f3f3 	udiv	r3, r1, r3
 800095a:	60bb      	str	r3, [r7, #8]
			tempreg |= (ccr & 0xFFF);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4313      	orrs	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
			tempreg |= (1 << I2C_CCR_DUTY);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	60fb      	str	r3, [r7, #12]
		}
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	61da      	str	r2, [r3, #28]

	//5. TRISE Calculations
	tempreg=0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.SCLSpeed <= I2C_SCLSpeed_SM_100)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <I2C_Init+0x160>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d809      	bhi.n	800099a <I2C_Init+0x12a>
		{
			//mode is standard mode

			tempreg = (RCC_GetPClk1Value() /1000000U) + 1 ;
 8000986:	f7ff fec5 	bl	8000714 <RCC_GetPClk1Value>
 800098a:	4603      	mov	r3, r0
 800098c:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <I2C_Init+0x15c>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9b      	lsrs	r3, r3, #18
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e00d      	b.n	80009b6 <I2C_Init+0x146>

		}else
		{
			//mode is fast mode
			tempreg = ( (RCC_GetPClk1Value() * 300) / 1000000000U ) + 1;
 800099a:	f7ff febb 	bl	8000714 <RCC_GetPClk1Value>
 800099e:	4603      	mov	r3, r0
 80009a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	0a5b      	lsrs	r3, r3, #9
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <I2C_Init+0x164>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	09db      	lsrs	r3, r3, #7
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]

		}

		pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009c0:	621a      	str	r2, [r3, #32]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	000186a0 	.word	0x000186a0
 80009d4:	00044b83 	.word	0x00044b83

080009d8 <I2CMaster_SendData>:

/*
 * I2C Send & Recieve Data functions
 */

void I2CMaster_SendData(I2C_Handle_t *pI2CHandle, uint8_t* pTxBuffer, uint32_t len, uint8_t slaveAddr, uint8_t RepeatedSt){
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	70fb      	strb	r3, [r7, #3]

	//Start Generation
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009f4:	601a      	str	r2, [r3, #0]

	//Assure the Completion of Start
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB)));
 80009f6:	bf00      	nop
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f8      	beq.n	80009f8 <I2CMaster_SendData+0x20>

	//Send the Slave Address with r/w' bit w(0)
	slaveAddr = ( slaveAddr << 1 ) ;
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	70fb      	strb	r3, [r7, #3]
	pI2CHandle->pI2Cx->DR = slaveAddr;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	611a      	str	r2, [r3, #16]

	//Confirm the Address was sent by checking the ADDR Flag
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR)));
 8000a14:	bf00      	nop
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f8      	beq.n	8000a16 <I2CMaster_SendData+0x3e>
	//CLear the ADDR Flag
	uint32_t tempreg;
	tempreg = pI2CHandle->pI2Cx->SR1;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	617b      	str	r3, [r7, #20]
	tempreg = pI2CHandle->pI2Cx->SR2;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	617b      	str	r3, [r7, #20]
	(void)tempreg;

	while(len > 0){
 8000a34:	e012      	b.n	8000a5c <I2CMaster_SendData+0x84>
		while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)));
 8000a36:	bf00      	nop
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f8      	beq.n	8000a38 <I2CMaster_SendData+0x60>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
		len--;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
	while(len > 0){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1e9      	bne.n	8000a36 <I2CMaster_SendData+0x5e>
	}

	//Wait for TXE and BTF
	while(!((pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)) & (pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF))));
 8000a62:	bf00      	nop
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	2300      	movs	r3, #0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f6      	beq.n	8000a64 <I2CMaster_SendData+0x8c>
	//Generate Stop
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a84:	601a      	str	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <delay>:
 */

#include <stm32f407vg.h>
#include <string.h>

void delay(void){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<50000;i++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	e002      	b.n	8000aa2 <delay+0x12>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d9f7      	bls.n	8000a9c <delay+0xc>

	}
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <main>:

int main(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b090      	sub	sp, #64	; 0x40
 8000abc:	af00      	add	r7, sp, #0

	//GPIO Button
	GPIO_Handle_t Button;
	Button.pGPIOx = GPIOA;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <main+0x8c>)
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	Button.GPIO_PinConfig.GPIO_PinNumber =	0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	Button.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PUPD_NOPUPD;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	GPIO_Init(&Button);
 8000ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fb8d 	bl	80001f8 <GPIO_Init>
	GPIO_IRQConfig(IRQ_NO_EXTI0, 15, ENABLE);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	2006      	movs	r0, #6
 8000ae4:	f7ff fd46 	bl	8000574 <GPIO_IRQConfig>
	/*
	 * GPIO INIT FOR I2C PERIPH
	 */
	GPIO_Handle_t I2C_Pins;

	I2C_Pins.pGPIOx = GPIOB;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <main+0x90>)
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28

	I2C_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	I2C_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OPTYPE_OD;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	I2C_Pins.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PUPD_PU;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	I2C_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEED_HIGH;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	I2C_Pins.GPIO_PinConfig.GPIO_PinAltFunc = GPIO_AF4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	//SCL Pin
	I2C_Pins.GPIO_PinConfig.GPIO_PinNumber = 6;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_Init(&I2C_Pins);
 8000b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb6f 	bl	80001f8 <GPIO_Init>

	//SDA Pin
	I2C_Pins.GPIO_PinConfig.GPIO_PinNumber = 7;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_Init(&I2C_Pins);
 8000b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb67 	bl	80001f8 <GPIO_Init>



	I2C_Handle_t 	I2C1_Handler;

	I2C1_Handler.pI2Cx = I2C1;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <main+0x94>)
 8000b2c:	607b      	str	r3, [r7, #4]

	I2C1_Handler.I2C_Config.AckControl = I2C_ACK_ENABLE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	737b      	strb	r3, [r7, #13]
	I2C1_Handler.I2C_Config.DeviceAddress = 0b1010111;
 8000b32:	2357      	movs	r3, #87	; 0x57
 8000b34:	733b      	strb	r3, [r7, #12]
	I2C1_Handler.I2C_Config.SCLSpeed = I2C_SCLSpeed_SM_100;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <main+0x98>)
 8000b38:	60bb      	str	r3, [r7, #8]


	I2C_Init(&I2C1_Handler);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe97 	bl	8000870 <I2C_Init>



	while(1);
 8000b42:	e7fe      	b.n	8000b42 <main+0x8a>
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <EXTI0_IRQHandler>:

}

void EXTI0_IRQHandler(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af02      	add	r7, sp, #8
	delay();
 8000b5a:	f7ff ff99 	bl	8000a90 <delay>
	char data[] = {0x6B, 0x00};
 8000b5e:	236b      	movs	r3, #107	; 0x6b
 8000b60:	80bb      	strh	r3, [r7, #4]
	char data1[] = {0x1B, 0x00};
 8000b62:	231b      	movs	r3, #27
 8000b64:	803b      	strh	r3, [r7, #0]

	(void) data;
	(void) data1;

	GPIO_IRQHandling(0);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff fda8 	bl	80006bc <GPIO_IRQHandling>

	I2C1->CR1 |= (1 << I2C_CR1_PE);
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <EXTI0_IRQHandler+0x60>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <EXTI0_IRQHandler+0x60>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]
	I2CMaster_SendData(I2C1, (uint8_t*) data, strlen(data), 0b1111111,0);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb34 	bl	80001e8 <strlen>
 8000b80:	4602      	mov	r2, r0
 8000b82:	1d39      	adds	r1, r7, #4
 8000b84:	2300      	movs	r3, #0
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	237f      	movs	r3, #127	; 0x7f
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <EXTI0_IRQHandler+0x60>)
 8000b8c:	f7ff ff24 	bl	80009d8 <I2CMaster_SendData>
	delay();
 8000b90:	f7ff ff7e 	bl	8000a90 <delay>
	I2CMaster_SendData(I2C1, (uint8_t*) data1,strlen(data1),0b110100,0);
 8000b94:	463b      	mov	r3, r7
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb26 	bl	80001e8 <strlen>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4639      	mov	r1, r7
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2334      	movs	r3, #52	; 0x34
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <EXTI0_IRQHandler+0x60>)
 8000ba8:	f7ff ff16 	bl	80009d8 <I2CMaster_SendData>

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40005400 	.word	0x40005400

08000bb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bbc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	; (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be6:	f000 f811 	bl	8000c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bea:	f7ff ff65 	bl	8000ab8 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   r0, =_estack
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bfc:	08000c74 	.word	0x08000c74
  ldr r2, =_sbss
 8000c00:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c04:	20000034 	.word	0x20000034

08000c08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <__libc_init_array>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	4d0d      	ldr	r5, [pc, #52]	; (8000c44 <__libc_init_array+0x38>)
 8000c10:	4c0d      	ldr	r4, [pc, #52]	; (8000c48 <__libc_init_array+0x3c>)
 8000c12:	1b64      	subs	r4, r4, r5
 8000c14:	10a4      	asrs	r4, r4, #2
 8000c16:	2600      	movs	r6, #0
 8000c18:	42a6      	cmp	r6, r4
 8000c1a:	d109      	bne.n	8000c30 <__libc_init_array+0x24>
 8000c1c:	4d0b      	ldr	r5, [pc, #44]	; (8000c4c <__libc_init_array+0x40>)
 8000c1e:	4c0c      	ldr	r4, [pc, #48]	; (8000c50 <__libc_init_array+0x44>)
 8000c20:	f000 f818 	bl	8000c54 <_init>
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	10a4      	asrs	r4, r4, #2
 8000c28:	2600      	movs	r6, #0
 8000c2a:	42a6      	cmp	r6, r4
 8000c2c:	d105      	bne.n	8000c3a <__libc_init_array+0x2e>
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
 8000c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c34:	4798      	blx	r3
 8000c36:	3601      	adds	r6, #1
 8000c38:	e7ee      	b.n	8000c18 <__libc_init_array+0xc>
 8000c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c3e:	4798      	blx	r3
 8000c40:	3601      	adds	r6, #1
 8000c42:	e7f2      	b.n	8000c2a <__libc_init_array+0x1e>
 8000c44:	08000c6c 	.word	0x08000c6c
 8000c48:	08000c6c 	.word	0x08000c6c
 8000c4c:	08000c6c 	.word	0x08000c6c
 8000c50:	08000c70 	.word	0x08000c70

08000c54 <_init>:
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	bf00      	nop
 8000c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5a:	bc08      	pop	{r3}
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	4770      	bx	lr

08000c60 <_fini>:
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	bf00      	nop
 8000c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c66:	bc08      	pop	{r3}
 8000c68:	469e      	mov	lr, r3
 8000c6a:	4770      	bx	lr
